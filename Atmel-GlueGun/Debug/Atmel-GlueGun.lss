
Atmel-GlueGun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ee  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000515  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c4  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000766  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	4d c0       	rjmp	.+154    	; 0xa2 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 eb       	ldi	r30, 0xB0	; 176
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a6 36       	cpi	r26, 0x66	; 102
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a6 e6       	ldi	r26, 0x66	; 102
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	87 d0       	rcall	.+270    	; 0x152 <main>
  44:	33 c1       	rjmp	.+614    	; 0x2ac <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <setChar>:

void _puts(char *str)
{
	#if DEBUG
	usoft_putString((unsigned char *)str);
	usoft_putCharf(0x0D);
  48:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
  4c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <usoft_rx_tx_byte>
  50:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <usoft_timeCount>
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <usoft_tx_work>
  5a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usoft_tx_work>
  5e:	81 11       	cpse	r24, r1
  60:	fc cf       	rjmp	.-8      	; 0x5a <setChar+0x12>
  62:	08 95       	ret

00000064 <usoft_init>:
  64:	b8 9a       	sbi	0x17, 0	; 23
  66:	c0 9a       	sbi	0x18, 0	; 24
  68:	82 e0       	ldi	r24, 0x02	; 2
  6a:	83 bf       	out	0x33, r24	; 51
  6c:	86 e8       	ldi	r24, 0x86	; 134
  6e:	82 bf       	out	0x32, r24	; 50
  70:	89 b7       	in	r24, 0x39	; 57
  72:	82 60       	ori	r24, 0x02	; 2
  74:	89 bf       	out	0x39, r24	; 57
  76:	78 94       	sei
  78:	08 95       	ret

0000007a <usoft_putChar>:
  7a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <usoft_rx_work>
  7e:	e4 df       	rcall	.-56     	; 0x48 <setChar>
  80:	08 95       	ret

00000082 <usoft_putStringf>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	ec 01       	movw	r28, r24
  88:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <usoft_rx_work>
  8c:	88 81       	ld	r24, Y
  8e:	88 23       	and	r24, r24
  90:	29 f0       	breq	.+10     	; 0x9c <usoft_putStringf+0x1a>
  92:	21 96       	adiw	r28, 0x01	; 1
  94:	d9 df       	rcall	.-78     	; 0x48 <setChar>
  96:	89 91       	ld	r24, Y+
  98:	81 11       	cpse	r24, r1
  9a:	fc cf       	rjmp	.-8      	; 0x94 <usoft_putStringf+0x12>
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <__vector_3>:
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	86 e8       	ldi	r24, 0x86	; 134
  b4:	82 bf       	out	0x32, r24	; 50
  b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <usoft_timeCount>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <usoft_timeCount>
  c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <usoft_timeCount>
  c4:	80 ff       	sbrs	r24, 0
  c6:	2e c0       	rjmp	.+92     	; 0x124 <__vector_3+0x82>
  c8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usoft_tx_work>
  cc:	88 23       	and	r24, r24
  ce:	41 f1       	breq	.+80     	; 0x120 <__vector_3+0x7e>
  d0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d4:	81 11       	cpse	r24, r1
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_3+0x3a>
  d8:	c0 98       	cbi	0x18, 0	; 24
  da:	16 c0       	rjmp	.+44     	; 0x108 <__vector_3+0x66>
  dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  e0:	89 30       	cpi	r24, 0x09	; 9
  e2:	88 f4       	brcc	.+34     	; 0x106 <__vector_3+0x64>
  e4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <usoft_rx_tx_byte>
  e8:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_3+0x54>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <__vector_3+0x50>
  fa:	80 ff       	sbrs	r24, 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__vector_3+0x60>
  fe:	c0 9a       	sbi	0x18, 0	; 24
 100:	03 c0       	rjmp	.+6      	; 0x108 <__vector_3+0x66>
 102:	c0 98       	cbi	0x18, 0	; 24
 104:	01 c0       	rjmp	.+2      	; 0x108 <__vector_3+0x66>
 106:	c0 9a       	sbi	0x18, 0	; 24
 108:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	11 f4       	brne	.+4      	; 0x114 <__vector_3+0x72>
 110:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <usoft_tx_work>
 114:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__vector_3+0x82>
 120:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <usoft_rx_work>
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <adc_init>:
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	86 b9       	out	0x06, r24	; 6
 138:	a2 9a       	sbi	0x14, 2	; 20
 13a:	08 95       	ret

0000013c <read_adc>:
 13c:	87 b9       	out	0x07, r24	; 7
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <read_adc+0x4>
 144:	36 9a       	sbi	0x06, 6	; 6
 146:	34 9b       	sbis	0x06, 4	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <read_adc+0xa>
 14a:	34 9a       	sbi	0x06, 4	; 6
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	08 95       	ret

00000152 <main>:

const int adcCount = 10;
int main(void)
{
	int tMeasure;
	io_set(DDR, IO_Heat);
 152:	bb 9a       	sbi	0x17, 3	; 23
	
	adc_init();
 154:	ef df       	rcall	.-34     	; 0x134 <adc_init>
	#if DEBUG
	usoft_init();
 156:	86 df       	rcall	.-244    	; 0x64 <usoft_init>
		for (uint8_t i = 0; i < adcCount; ++i)
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		tMeasure = tMeasure/adcCount;
 158:	0f 2e       	mov	r0, r31
 15a:	fa e0       	ldi	r31, 0x0A	; 10
 15c:	ef 2e       	mov	r14, r31
 15e:	f1 2c       	mov	r15, r1
 160:	f0 2d       	mov	r31, r0
			//_puts("Fan_Off");
		//}
		#if DEBUG
		usoft_putStringf("adc:");

		int at = tMeasure /1000;
 162:	0f 2e       	mov	r0, r31
 164:	f0 e1       	ldi	r31, 0x10	; 16
 166:	af 2e       	mov	r10, r31
 168:	f7 e2       	ldi	r31, 0x27	; 39
 16a:	bf 2e       	mov	r11, r31
 16c:	f0 2d       	mov	r31, r0
		usoft_putChar(48 + at);
		tMeasure = tMeasure - at * 1000;
		
		at = tMeasure /100;
 16e:	0f 2e       	mov	r0, r31
 170:	f4 e6       	ldi	r31, 0x64	; 100
 172:	cf 2e       	mov	r12, r31
 174:	d1 2c       	mov	r13, r1
 176:	f0 2d       	mov	r31, r0
	usoft_init();
	#endif

	while (1)
	{
		io_resetPort(IO_Heat);
 178:	c3 98       	cbi	0x18, 3	; 24
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x32>
		
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	d8 df       	rcall	.-80     	; 0x13c <read_adc>
 18c:	08 0f       	add	r16, r24
 18e:	19 1f       	adc	r17, r25
	while (1)
	{
		io_resetPort(IO_Heat);
		
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
 190:	cf 5f       	subi	r28, 0xFF	; 255
 192:	ca 30       	cpi	r28, 0x0A	; 10
 194:	a9 f7       	brne	.-22     	; 0x180 <main+0x2e>
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		tMeasure = tMeasure/adcCount;
 196:	c8 01       	movw	r24, r16
 198:	b7 01       	movw	r22, r14
 19a:	61 d0       	rcall	.+194    	; 0x25e <__divmodhi4>
 19c:	eb 01       	movw	r28, r22
		//{
			//io_resetPort(IO_Fan); //todo check
			//_puts("Fan_Off");
		//}
		#if DEBUG
		usoft_putStringf("adc:");
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	6f df       	rcall	.-290    	; 0x82 <usoft_putStringf>

		int at = tMeasure /1000;
 1a4:	c8 01       	movw	r24, r16
 1a6:	b5 01       	movw	r22, r10
 1a8:	5a d0       	rcall	.+180    	; 0x25e <__divmodhi4>
 1aa:	8b 01       	movw	r16, r22
		usoft_putChar(48 + at);
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	86 0f       	add	r24, r22
 1b0:	64 df       	rcall	.-312    	; 0x7a <usoft_putChar>
		tMeasure = tMeasure - at * 1000;
 1b2:	c8 01       	movw	r24, r16
 1b4:	00 24       	eor	r0, r0
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	07 94       	ror	r0
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	07 94       	ror	r0
 1c2:	98 2f       	mov	r25, r24
 1c4:	80 2d       	mov	r24, r0
 1c6:	80 1b       	sub	r24, r16
 1c8:	91 0b       	sbc	r25, r17
 1ca:	00 24       	eor	r0, r0
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	07 94       	ror	r0
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	07 94       	ror	r0
 1d8:	98 2f       	mov	r25, r24
 1da:	80 2d       	mov	r24, r0
 1dc:	80 0f       	add	r24, r16
 1de:	91 1f       	adc	r25, r17
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	08 0f       	add	r16, r24
 1e6:	19 1f       	adc	r17, r25
 1e8:	00 0f       	add	r16, r16
 1ea:	11 1f       	adc	r17, r17
 1ec:	00 0f       	add	r16, r16
 1ee:	11 1f       	adc	r17, r17
 1f0:	00 0f       	add	r16, r16
 1f2:	11 1f       	adc	r17, r17
 1f4:	c0 0f       	add	r28, r16
 1f6:	d1 1f       	adc	r29, r17
		
		at = tMeasure /100;
 1f8:	ce 01       	movw	r24, r28
 1fa:	b6 01       	movw	r22, r12
 1fc:	30 d0       	rcall	.+96     	; 0x25e <__divmodhi4>
 1fe:	8b 01       	movw	r16, r22
		usoft_putChar(48 + at);
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	86 0f       	add	r24, r22
 204:	3a df       	rcall	.-396    	; 0x7a <usoft_putChar>
		tMeasure = tMeasure - at * 100;
 206:	c8 01       	movw	r24, r16
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	08 0f       	add	r16, r24
 212:	19 1f       	adc	r17, r25
 214:	c8 01       	movw	r24, r16
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	08 0f       	add	r16, r24
 220:	19 1f       	adc	r17, r25
 222:	00 0f       	add	r16, r16
 224:	11 1f       	adc	r17, r17
 226:	00 0f       	add	r16, r16
 228:	11 1f       	adc	r17, r17
 22a:	c0 1b       	sub	r28, r16
 22c:	d1 0b       	sbc	r29, r17
		
		at = tMeasure /10;
 22e:	ce 01       	movw	r24, r28
 230:	b7 01       	movw	r22, r14
 232:	15 d0       	rcall	.+42     	; 0x25e <__divmodhi4>
 234:	8b 01       	movw	r16, r22
		usoft_putChar(48 + at);
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	86 0f       	add	r24, r22
 23a:	1f df       	rcall	.-450    	; 0x7a <usoft_putChar>
		tMeasure = tMeasure - at * 10;

		usoft_putChar(48 + tMeasure);
 23c:	c8 01       	movw	r24, r16
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	08 0f       	add	r16, r24
 248:	19 1f       	adc	r17, r25
 24a:	00 0f       	add	r16, r16
 24c:	11 1f       	adc	r17, r17
 24e:	ce 01       	movw	r24, r28
 250:	80 1b       	sub	r24, r16
 252:	91 0b       	sbc	r25, r17
 254:	80 5d       	subi	r24, 0xD0	; 208
 256:	11 df       	rcall	.-478    	; 0x7a <usoft_putChar>
		usoft_putChar(0x0D);
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0f df       	rcall	.-482    	; 0x7a <usoft_putChar>
		#endif
	}
 25c:	8d cf       	rjmp	.-230    	; 0x178 <main+0x26>

0000025e <__divmodhi4>:
 25e:	97 fb       	bst	r25, 7
 260:	07 2e       	mov	r0, r23
 262:	16 f4       	brtc	.+4      	; 0x268 <__divmodhi4+0xa>
 264:	00 94       	com	r0
 266:	06 d0       	rcall	.+12     	; 0x274 <__divmodhi4_neg1>
 268:	77 fd       	sbrc	r23, 7
 26a:	08 d0       	rcall	.+16     	; 0x27c <__divmodhi4_neg2>
 26c:	0b d0       	rcall	.+22     	; 0x284 <__udivmodhi4>
 26e:	07 fc       	sbrc	r0, 7
 270:	05 d0       	rcall	.+10     	; 0x27c <__divmodhi4_neg2>
 272:	3e f4       	brtc	.+14     	; 0x282 <__divmodhi4_exit>

00000274 <__divmodhi4_neg1>:
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__divmodhi4_neg2>:
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255

00000282 <__divmodhi4_exit>:
 282:	08 95       	ret

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
