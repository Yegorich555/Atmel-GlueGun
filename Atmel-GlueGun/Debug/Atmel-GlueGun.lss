
Atmel-GlueGun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080007c  0080007c  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6d  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a2  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  0000226b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	71 c0       	rjmp	.+226    	; 0xea <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e4 e9       	ldi	r30, 0x94	; 148
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	ac 37       	cpi	r26, 0x7C	; 124
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	ac e7       	ldi	r26, 0x7C	; 124
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 38       	cpi	r26, 0x81	; 129
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	af d0       	rcall	.+350    	; 0x1a2 <main>
  44:	a5 c1       	rjmp	.+842    	; 0x390 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <setChar>:
	while(num)
	{
		setChar(*str++);
		--num;
	}
}
  48:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
  4c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <usoft_rx_tx_byte>
  50:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <usoft_timeCount>
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <usoft_tx_work>
  5a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <usoft_tx_work>
  5e:	81 11       	cpse	r24, r1
  60:	fc cf       	rjmp	.-8      	; 0x5a <setChar+0x12>
  62:	08 95       	ret

00000064 <delay_ms>:
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	69 f0       	breq	.+26     	; 0x82 <delay_ms+0x1e>
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	ef e5       	ldi	r30, 0x5F	; 95
  6e:	f9 e0       	ldi	r31, 0x09	; 9
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <delay_ms+0xc>
  74:	00 c0       	rjmp	.+0      	; 0x76 <delay_ms+0x12>
  76:	00 00       	nop
  78:	2f 5f       	subi	r18, 0xFF	; 255
  7a:	3f 4f       	sbci	r19, 0xFF	; 255
  7c:	82 17       	cp	r24, r18
  7e:	93 07       	cpc	r25, r19
  80:	a9 f7       	brne	.-22     	; 0x6c <delay_ms+0x8>
  82:	08 95       	ret

00000084 <usoft_init>:
  84:	b8 9a       	sbi	0x17, 0	; 23
  86:	c0 9a       	sbi	0x18, 0	; 24
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	83 bf       	out	0x33, r24	; 51
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	82 bf       	out	0x32, r24	; 50
  90:	89 b7       	in	r24, 0x39	; 57
  92:	82 60       	ori	r24, 0x02	; 2
  94:	89 bf       	out	0x39, r24	; 57
  96:	78 94       	sei
  98:	08 95       	ret

0000009a <usoft_putChar>:
  9a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usoft_rx_work>
  9e:	d4 df       	rcall	.-88     	; 0x48 <setChar>
  a0:	08 95       	ret

000000a2 <usoft_putCharf>:
  a2:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usoft_rx_work>
  a6:	d0 df       	rcall	.-96     	; 0x48 <setChar>
  a8:	08 95       	ret

000000aa <usoft_putString>:
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usoft_rx_work>
  b4:	88 81       	ld	r24, Y
  b6:	88 23       	and	r24, r24
  b8:	29 f0       	breq	.+10     	; 0xc4 <usoft_putString+0x1a>
  ba:	21 96       	adiw	r28, 0x01	; 1
  bc:	c5 df       	rcall	.-118    	; 0x48 <setChar>
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fc cf       	rjmp	.-8      	; 0xbc <usoft_putString+0x12>
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <usoft_putStringf>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
  d0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usoft_rx_work>
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	29 f0       	breq	.+10     	; 0xe4 <usoft_putStringf+0x1a>
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	b5 df       	rcall	.-150    	; 0x48 <setChar>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fc cf       	rjmp	.-8      	; 0xdc <usoft_putStringf+0x12>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_3>:
#endif

// Timer 0 overflow interrupt service routine
#ifdef USOFT_tISR
ISR(USOFT_tISR)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	USOFT_tCNT = USOFT_tCNTvalue;
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	82 bf       	out	0x32, r24	; 50
	
	#if USOFT_IO_MEANDR
	io_togglePort(USOFT_IO_MEANDR);
	#endif

	++usoft_timeCount;
  fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <usoft_timeCount>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usoft_timeCount>
	if (!(usoft_timeCount & 1)) // set mask 1 3 5 7....
 108:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <usoft_timeCount>
 10c:	80 ff       	sbrs	r24, 0
 10e:	2e c0       	rjmp	.+92     	; 0x16c <__vector_3+0x82>
	{
		return;
	}

	if (usoft_tx_work)
 110:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <usoft_tx_work>
 114:	88 23       	and	r24, r24
 116:	41 f1       	breq	.+80     	; 0x168 <__vector_3+0x7e>
}


static void txSend()
{
	if (usoft_iBit == 0) //Start bit
 118:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 11c:	81 11       	cpse	r24, r1
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__vector_3+0x3a>
	{
		usoft_txReset();
 120:	c0 98       	cbi	0x18, 0	; 24
 122:	16 c0       	rjmp	.+44     	; 0x150 <__vector_3+0x66>
	}
	else if (usoft_iBit < 9)
 124:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 128:	89 30       	cpi	r24, 0x09	; 9
 12a:	88 f4       	brcc	.+34     	; 0x14e <__vector_3+0x64>
	{
		if (usoft_rx_tx_byte & ( 1 << (usoft_iBit - 1) ))
 12c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <usoft_rx_tx_byte>
 130:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__data_end>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	21 50       	subi	r18, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_3+0x54>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <__vector_3+0x50>
 142:	80 ff       	sbrs	r24, 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_3+0x60>
		{
			usoft_txSet();
 146:	c0 9a       	sbi	0x18, 0	; 24
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_3+0x66>
		}
		else
		{
			usoft_txReset();
 14a:	c0 98       	cbi	0x18, 0	; 24
 14c:	01 c0       	rjmp	.+2      	; 0x150 <__vector_3+0x66>
		}
	}
	else //Stop bit
	{
		usoft_txSet();
 14e:	c0 9a       	sbi	0x18, 0	; 24
	}
	
	if (usoft_iBit == 10) //End parcel action
 150:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	11 f4       	brne	.+4      	; 0x15c <__vector_3+0x72>
	{
		usoft_tx_work = 0;
 158:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <usoft_tx_work>
	}

	++usoft_iBit;
 15c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_3+0x82>
	{
		#if USOFT_TXEN
		txSend();
		#endif
	}
	else if (usoft_rx_work)
 168:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <usoft_rx_work>
	{
		#if USOFT_RXEN
		rxReceive();
		#endif
	}
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <adc_init>:
#include <uart_soft.h>
#endif

void adc_init(void)
{
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0); // prescaler 64 => 125 kHz
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	86 b9       	out	0x06, r24	; 6
	DIDR0 |= (0<<ADC0D)|(0<<ADC1D)|(1<<ADC2D)|(0<<ADC3D); //disable digital input for selected ADC
 180:	a4 9a       	sbi	0x14, 4	; 20
 182:	08 95       	ret

00000184 <read_adc>:
}

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
 184:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	80 e2       	ldi	r24, 0x20	; 32
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <read_adc+0x4>
	_delay_us(10); // Delay needed for the stabilization of the ADC input voltage
	ADCSRA|=(1<<ADSC); // Start the AD conversion
 18c:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & (1<<ADIF))==0); // Wait for the AD conversion to complete
 18e:	34 9b       	sbis	0x06, 4	; 6
 190:	fe cf       	rjmp	.-4      	; 0x18e <read_adc+0xa>
	ADCSRA|=(1<<ADIF);
 192:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 194:	84 b1       	in	r24, 0x04	; 4
 196:	95 b1       	in	r25, 0x05	; 5
}
 198:	08 95       	ret

0000019a <_puts>:

void _puts(char *str)
{
	#if DEBUG
	usoft_putString((unsigned char *)str);
 19a:	87 df       	rcall	.-242    	; 0xaa <usoft_putString>
	usoft_putCharf(0x0D);
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	81 df       	rcall	.-254    	; 0xa2 <usoft_putCharf>
 1a0:	08 95       	ret

000001a2 <main>:
int main(void)
{
	int tMeasure;
	int moveSensCount = 0;
	int heaterMaxCount = 0;
	io_set(DDR, IO_Heat);
 1a2:	bb 9a       	sbi	0x17, 3	; 23
	
	adc_init();
 1a4:	eb df       	rcall	.-42     	; 0x17c <adc_init>
	#if DEBUG
	usoft_init();
 1a6:	6e df       	rcall	.-292    	; 0x84 <usoft_init>
const int adcCount = 10;
int main(void)
{
	int tMeasure;
	int moveSensCount = 0;
	int heaterMaxCount = 0;
 1a8:	c1 2c       	mov	r12, r1
 1aa:	d1 2c       	mov	r13, r1

const int adcCount = 10;
int main(void)
{
	int tMeasure;
	int moveSensCount = 0;
 1ac:	41 2c       	mov	r4, r1
 1ae:	51 2c       	mov	r5, r1
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
 1b0:	0f 2e       	mov	r0, r31
 1b2:	fa e0       	ldi	r31, 0x0A	; 10
 1b4:	ef 2e       	mov	r14, r31
 1b6:	f1 2c       	mov	r15, r1
 1b8:	f0 2d       	mov	r31, r0
		++moveSensCount;
		
		#if DEBUG
		usoft_putStringf("adc:");

		int at = tMeasure /1000;
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f0 e1       	ldi	r31, 0x10	; 16
 1be:	8f 2e       	mov	r8, r31
 1c0:	f7 e2       	ldi	r31, 0x27	; 39
 1c2:	9f 2e       	mov	r9, r31
 1c4:	f0 2d       	mov	r31, r0
		usoft_putChar(48 + at);
		tMeasure = tMeasure - at * 1000;
		
		at = tMeasure /100;
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f4 e6       	ldi	r31, 0x64	; 100
 1ca:	6f 2e       	mov	r6, r31
 1cc:	71 2c       	mov	r7, r1
 1ce:	f0 2d       	mov	r31, r0
	#endif

	while (1)
	{
		//moveSensor behavior
		if (io_getPin(IO_MoveSens))
 1d0:	b0 9b       	sbis	0x16, 0	; 22
 1d2:	b0 c0       	rjmp	.+352    	; 0x334 <main+0x192>
		{
			delay_ms(10);
 1d4:	c7 01       	movw	r24, r14
 1d6:	46 df       	rcall	.-372    	; 0x64 <delay_ms>
			if (io_getPin(IO_MoveSens))
 1d8:	b0 99       	sbic	0x16, 0	; 22
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <main+0x46>
			{
				moveSensCount = 0;
			}
			
		}
		if (moveSensCount >= MOVE_SENS_TIMEOUT)
 1dc:	28 e2       	ldi	r18, 0x28	; 40
 1de:	42 16       	cp	r4, r18
 1e0:	23 e2       	ldi	r18, 0x23	; 35
 1e2:	52 06       	cpc	r5, r18
 1e4:	5c f0       	brlt	.+22     	; 0x1fc <main+0x5a>
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <main+0x4c>
		if (io_getPin(IO_MoveSens))
		{
			delay_ms(10);
			if (io_getPin(IO_MoveSens))
			{
				moveSensCount = 0;
 1e8:	41 2c       	mov	r4, r1
 1ea:	51 2c       	mov	r5, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <main+0x5a>
			}
			
		}
		if (moveSensCount >= MOVE_SENS_TIMEOUT)
		{
			io_resetPort(IO_Heat);
 1ee:	c3 98       	cbi	0x18, 3	; 24
			_puts("OffMove");
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	d2 df       	rcall	.-92     	; 0x19a <_puts>
			heaterMaxCount = 0;
 1f6:	c1 2c       	mov	r12, r1
 1f8:	d1 2c       	mov	r13, r1
			continue;
 1fa:	ea cf       	rjmp	.-44     	; 0x1d0 <main+0x2e>
		if (io_getPin(IO_MoveSens))
		{
			delay_ms(10);
			if (io_getPin(IO_MoveSens))
			{
				moveSensCount = 0;
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	80 ef       	ldi	r24, 0xF0	; 240
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x64>
		//heater behavior
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	bb df       	rcall	.-138    	; 0x184 <read_adc>
 20e:	c8 0f       	add	r28, r24
 210:	d9 1f       	adc	r29, r25
			continue;
		}
		
		//heater behavior
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
 212:	1f 5f       	subi	r17, 0xFF	; 255
 214:	1a 30       	cpi	r17, 0x0A	; 10
 216:	a9 f7       	brne	.-22     	; 0x202 <main+0x60>
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
 218:	ce 01       	movw	r24, r28
 21a:	b7 01       	movw	r22, r14
 21c:	92 d0       	rcall	.+292    	; 0x342 <__divmodhi4>
 21e:	5b 01       	movw	r10, r22
		
		if (tMeasure >= ADC_TD_OFF)
 220:	6b 3d       	cpi	r22, 0xDB	; 219
 222:	23 e0       	ldi	r18, 0x03	; 3
 224:	72 07       	cpc	r23, r18
 226:	3c f0       	brlt	.+14     	; 0x236 <main+0x94>
		{
			heaterMaxCount = 0;
			io_resetPort(IO_Heat);
 228:	c3 98       	cbi	0x18, 3	; 24
			_puts("Off");
 22a:	88 e6       	ldi	r24, 0x68	; 104
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	b5 df       	rcall	.-150    	; 0x19a <_puts>
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
		
		if (tMeasure >= ADC_TD_OFF)
		{
			heaterMaxCount = 0;
 230:	c1 2c       	mov	r12, r1
 232:	d1 2c       	mov	r13, r1
 234:	13 c0       	rjmp	.+38     	; 0x25c <main+0xba>
			io_resetPort(IO_Heat);
			_puts("Off");
		}
		else if (tMeasure <= ADC_TD_ON) {
 236:	61 3d       	cpi	r22, 0xD1	; 209
 238:	73 40       	sbci	r23, 0x03	; 3
 23a:	84 f4       	brge	.+32     	; 0x25c <main+0xba>
			
			if (heaterMaxCount >= HEATER_MAX_TIME)
 23c:	88 e5       	ldi	r24, 0x58	; 88
 23e:	c8 16       	cp	r12, r24
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	d8 06       	cpc	r13, r24
 244:	24 f0       	brlt	.+8      	; 0x24e <main+0xac>
			{
				_puts("MaxTime");
 246:	8c e6       	ldi	r24, 0x6C	; 108
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	a7 df       	rcall	.-178    	; 0x19a <_puts>
 24c:	07 c0       	rjmp	.+14     	; 0x25c <main+0xba>
			}
			else
			{
				++heaterMaxCount;
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	c9 1a       	sub	r12, r25
 252:	d9 0a       	sbc	r13, r25
				io_setPort(IO_Heat);
 254:	c3 9a       	sbi	0x18, 3	; 24
				_puts("On");
 256:	84 e7       	ldi	r24, 0x74	; 116
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9f df       	rcall	.-194    	; 0x19a <_puts>
			}
		}
		++moveSensCount;
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	42 1a       	sub	r4, r18
 260:	52 0a       	sbc	r5, r18
		
		#if DEBUG
		usoft_putStringf("adc:");
 262:	87 e7       	ldi	r24, 0x77	; 119
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	31 df       	rcall	.-414    	; 0xca <usoft_putStringf>

		int at = tMeasure /1000;
 268:	ce 01       	movw	r24, r28
 26a:	b4 01       	movw	r22, r8
 26c:	6a d0       	rcall	.+212    	; 0x342 <__divmodhi4>
 26e:	eb 01       	movw	r28, r22
		usoft_putChar(48 + at);
 270:	86 2f       	mov	r24, r22
 272:	80 5d       	subi	r24, 0xD0	; 208
 274:	12 df       	rcall	.-476    	; 0x9a <usoft_putChar>
		tMeasure = tMeasure - at * 1000;
 276:	ce 01       	movw	r24, r28
 278:	00 24       	eor	r0, r0
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	07 94       	ror	r0
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	07 94       	ror	r0
 286:	98 2f       	mov	r25, r24
 288:	80 2d       	mov	r24, r0
 28a:	8c 1b       	sub	r24, r28
 28c:	9d 0b       	sbc	r25, r29
 28e:	00 24       	eor	r0, r0
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	07 94       	ror	r0
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	07 94       	ror	r0
 29c:	98 2f       	mov	r25, r24
 29e:	80 2d       	mov	r24, r0
 2a0:	8c 0f       	add	r24, r28
 2a2:	9d 1f       	adc	r25, r29
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	c8 0f       	add	r28, r24
 2aa:	d9 1f       	adc	r29, r25
 2ac:	cc 0f       	add	r28, r28
 2ae:	dd 1f       	adc	r29, r29
 2b0:	cc 0f       	add	r28, r28
 2b2:	dd 1f       	adc	r29, r29
 2b4:	cc 0f       	add	r28, r28
 2b6:	dd 1f       	adc	r29, r29
 2b8:	ca 0d       	add	r28, r10
 2ba:	db 1d       	adc	r29, r11
		
		at = tMeasure /100;
 2bc:	ce 01       	movw	r24, r28
 2be:	b3 01       	movw	r22, r6
 2c0:	40 d0       	rcall	.+128    	; 0x342 <__divmodhi4>
 2c2:	5b 01       	movw	r10, r22
		usoft_putChar(48 + at);
 2c4:	80 e3       	ldi	r24, 0x30	; 48
 2c6:	86 0f       	add	r24, r22
 2c8:	e8 de       	rcall	.-560    	; 0x9a <usoft_putChar>
		tMeasure = tMeasure - at * 100;
 2ca:	c5 01       	movw	r24, r10
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	a8 0e       	add	r10, r24
 2d6:	b9 1e       	adc	r11, r25
 2d8:	c5 01       	movw	r24, r10
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	a8 0e       	add	r10, r24
 2e4:	b9 1e       	adc	r11, r25
 2e6:	aa 0c       	add	r10, r10
 2e8:	bb 1c       	adc	r11, r11
 2ea:	aa 0c       	add	r10, r10
 2ec:	bb 1c       	adc	r11, r11
 2ee:	ca 19       	sub	r28, r10
 2f0:	db 09       	sbc	r29, r11
		
		at = tMeasure /10;
 2f2:	ce 01       	movw	r24, r28
 2f4:	b7 01       	movw	r22, r14
 2f6:	25 d0       	rcall	.+74     	; 0x342 <__divmodhi4>
 2f8:	5b 01       	movw	r10, r22
		usoft_putChar(48 + at);
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	86 0f       	add	r24, r22
 2fe:	cd de       	rcall	.-614    	; 0x9a <usoft_putChar>
		tMeasure = tMeasure - at * 10;

		usoft_putChar(48 + tMeasure);
 300:	c5 01       	movw	r24, r10
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	a8 0e       	add	r10, r24
 30c:	b9 1e       	adc	r11, r25
 30e:	aa 0c       	add	r10, r10
 310:	bb 1c       	adc	r11, r11
 312:	ce 01       	movw	r24, r28
 314:	8a 19       	sub	r24, r10
 316:	9b 09       	sbc	r25, r11
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	bf de       	rcall	.-642    	; 0x9a <usoft_putChar>
		usoft_putChar(0x0D);
 31c:	8d e0       	ldi	r24, 0x0D	; 13
 31e:	bd de       	rcall	.-646    	; 0x9a <usoft_putChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	97 e5       	ldi	r25, 0x57	; 87
 324:	22 e0       	ldi	r18, 0x02	; 2
 326:	81 50       	subi	r24, 0x01	; 1
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	20 40       	sbci	r18, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x184>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x18e>
 330:	00 00       	nop
 332:	4e cf       	rjmp	.-356    	; 0x1d0 <main+0x2e>
			{
				moveSensCount = 0;
			}
			
		}
		if (moveSensCount >= MOVE_SENS_TIMEOUT)
 334:	88 e2       	ldi	r24, 0x28	; 40
 336:	48 16       	cp	r4, r24
 338:	83 e2       	ldi	r24, 0x23	; 35
 33a:	58 06       	cpc	r5, r24
 33c:	0c f4       	brge	.+2      	; 0x340 <main+0x19e>
 33e:	5e cf       	rjmp	.-324    	; 0x1fc <main+0x5a>
 340:	56 cf       	rjmp	.-340    	; 0x1ee <main+0x4c>

00000342 <__divmodhi4>:
 342:	97 fb       	bst	r25, 7
 344:	07 2e       	mov	r0, r23
 346:	16 f4       	brtc	.+4      	; 0x34c <__divmodhi4+0xa>
 348:	00 94       	com	r0
 34a:	06 d0       	rcall	.+12     	; 0x358 <__divmodhi4_neg1>
 34c:	77 fd       	sbrc	r23, 7
 34e:	08 d0       	rcall	.+16     	; 0x360 <__divmodhi4_neg2>
 350:	0b d0       	rcall	.+22     	; 0x368 <__udivmodhi4>
 352:	07 fc       	sbrc	r0, 7
 354:	05 d0       	rcall	.+10     	; 0x360 <__divmodhi4_neg2>
 356:	3e f4       	brtc	.+14     	; 0x366 <__divmodhi4_exit>

00000358 <__divmodhi4_neg1>:
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	08 95       	ret

00000360 <__divmodhi4_neg2>:
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255

00000366 <__divmodhi4_exit>:
 366:	08 95       	ret

00000368 <__udivmodhi4>:
 368:	aa 1b       	sub	r26, r26
 36a:	bb 1b       	sub	r27, r27
 36c:	51 e1       	ldi	r21, 0x11	; 17
 36e:	07 c0       	rjmp	.+14     	; 0x37e <__udivmodhi4_ep>

00000370 <__udivmodhi4_loop>:
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	a6 17       	cp	r26, r22
 376:	b7 07       	cpc	r27, r23
 378:	10 f0       	brcs	.+4      	; 0x37e <__udivmodhi4_ep>
 37a:	a6 1b       	sub	r26, r22
 37c:	b7 0b       	sbc	r27, r23

0000037e <__udivmodhi4_ep>:
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	5a 95       	dec	r21
 384:	a9 f7       	brne	.-22     	; 0x370 <__udivmodhi4_loop>
 386:	80 95       	com	r24
 388:	90 95       	com	r25
 38a:	bc 01       	movw	r22, r24
 38c:	cd 01       	movw	r24, r26
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
