
Atmel-GlueGun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080008a  0080008a  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0b  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060c  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b56  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000032c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	69 c0       	rjmp	.+210    	; 0xda <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea e4       	ldi	r30, 0x4A	; 74
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 38       	cpi	r26, 0x8A	; 138
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	aa e8       	ldi	r26, 0x8A	; 138
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	af 38       	cpi	r26, 0x8F	; 143
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	be d0       	rcall	.+380    	; 0x1c0 <main>
  44:	80 c1       	rjmp	.+768    	; 0x346 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <usoft_putUInt>:
	_delay_us(10); // Delay needed for the stabilization of the ADC input voltage
	ADCSRA|=(1<<ADSC); // Start the AD conversion
	while ((ADCSRA & (1<<ADIF))==0); // Wait for the AD conversion to complete
	ADCSRA|=(1<<ADIF);
	return ADCW;
}
  48:	ff 92       	push	r15
  4a:	0f 93       	push	r16
  4c:	1f 93       	push	r17
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	18 2f       	mov	r17, r24
  54:	09 2f       	mov	r16, r25
  56:	e5 e0       	ldi	r30, 0x05	; 5
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	20 e1       	ldi	r18, 0x10	; 16
  5c:	37 e2       	ldi	r19, 0x27	; 39
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	ca e0       	ldi	r28, 0x0A	; 10
  62:	d0 e0       	ldi	r29, 0x00	; 0
  64:	ff 24       	eor	r15, r15
  66:	f3 94       	inc	r15
  68:	81 2f       	mov	r24, r17
  6a:	90 2f       	mov	r25, r16
  6c:	b9 01       	movw	r22, r18
  6e:	57 d1       	rcall	.+686    	; 0x31e <__udivmodhi4>
  70:	cb 01       	movw	r24, r22
  72:	be 01       	movw	r22, r28
  74:	54 d1       	rcall	.+680    	; 0x31e <__udivmodhi4>
  76:	41 11       	cpse	r20, r1
  78:	02 c0       	rjmp	.+4      	; 0x7e <usoft_putUInt+0x36>
  7a:	88 23       	and	r24, r24
  7c:	81 f0       	breq	.+32     	; 0x9e <usoft_putUInt+0x56>
  7e:	80 5d       	subi	r24, 0xD0	; 208
  80:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
  84:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
  88:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <usoft_rx_tx_byte>
  8c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
  90:	f0 92 8c 00 	sts	0x008C, r15	; 0x80008c <usoft_tx_work>
  94:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
  98:	81 11       	cpse	r24, r1
  9a:	fc cf       	rjmp	.-8      	; 0x94 <usoft_putUInt+0x4c>
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	c9 01       	movw	r24, r18
  a0:	be 01       	movw	r22, r28
  a2:	3d d1       	rcall	.+634    	; 0x31e <__udivmodhi4>
  a4:	9b 01       	movw	r18, r22
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f9 f6       	brne	.-66     	; 0x68 <usoft_putUInt+0x20>
  aa:	41 11       	cpse	r20, r1
  ac:	10 c0       	rjmp	.+32     	; 0xce <__stack+0x2f>
  ae:	10 5d       	subi	r17, 0xD0	; 208
  b0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
  b4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
  b8:	10 93 8d 00 	sts	0x008D, r17	; 0x80008d <usoft_rx_tx_byte>
  bc:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <usoft_tx_work>
  c6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
  ca:	81 11       	cpse	r24, r1
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <__stack+0x27>
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	ff 90       	pop	r15
  d8:	08 95       	ret

000000da <__vector_3>:
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	86 e8       	ldi	r24, 0x86	; 134
  ec:	82 bf       	out	0x32, r24	; 50
  ee:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <usoft_timeCount>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usoft_timeCount>
  f8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <usoft_timeCount>
  fc:	80 ff       	sbrs	r24, 0
  fe:	06 c0       	rjmp	.+12     	; 0x10c <__vector_3+0x32>
 100:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
 104:	81 11       	cpse	r24, r1
 106:	0a c0       	rjmp	.+20     	; 0x11c <__vector_3+0x42>
 108:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <usoft_rx_work>
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti
 11c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 120:	88 23       	and	r24, r24
 122:	89 f0       	breq	.+34     	; 0x146 <__vector_3+0x6c>
 124:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 128:	89 30       	cpi	r24, 0x09	; 9
 12a:	08 f5       	brcc	.+66     	; 0x16e <__vector_3+0x94>
 12c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <usoft_rx_tx_byte>
 130:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	21 50       	subi	r18, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_3+0x64>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <__vector_3+0x60>
 142:	80 fd       	sbrc	r24, 0
 144:	14 c0       	rjmp	.+40     	; 0x16e <__vector_3+0x94>
 146:	c1 98       	cbi	0x18, 1	; 24
 148:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	11 f4       	brne	.+4      	; 0x154 <__vector_3+0x7a>
 150:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <usoft_tx_work>
 154:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti
 16e:	c1 9a       	sbi	0x18, 1	; 24
 170:	eb cf       	rjmp	.-42     	; 0x148 <__vector_3+0x6e>

00000172 <_puts>:
}
#endif

static inline void rxReset()	//break off rx
{
	usoft_rx_work = 0;
 172:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
 176:	fc 01       	movw	r30, r24
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
	usoft_rx_tx_byte = b;
	usoft_timeCount = 0;
	usoft_tx_work = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
}

void usoft_putString(uint8_t *str)
{
	rxReset();
	while (*str)
 17a:	91 91       	ld	r25, Z+
 17c:	99 23       	and	r25, r25
 17e:	79 f0       	breq	.+30     	; 0x19e <_puts+0x2c>
}

#if USOFT_TXEN
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
 180:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	usoft_rx_tx_byte = b;
 184:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <usoft_rx_tx_byte>
	usoft_timeCount = 0;
 188:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
	usoft_tx_work = 1;
 18c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <usoft_tx_work>
	while (usoft_tx_work);
 190:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <usoft_tx_work>
 194:	91 11       	cpse	r25, r1
 196:	fc cf       	rjmp	.-8      	; 0x190 <_puts+0x1e>
}

void usoft_putString(uint8_t *str)
{
	rxReset();
	while (*str)
 198:	91 91       	ld	r25, Z+
 19a:	91 11       	cpse	r25, r1
 19c:	f1 cf       	rjmp	.-30     	; 0x180 <_puts+0xe>
}
#endif

static inline void rxReset()	//break off rx
{
	usoft_rx_work = 0;
 19e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
}

#if USOFT_TXEN
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
 1a2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	usoft_rx_tx_byte = b;
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <usoft_rx_tx_byte>
	usoft_timeCount = 0;
 1ac:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
	usoft_tx_work = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <usoft_tx_work>
	while (usoft_tx_work);
 1b6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
 1ba:	81 11       	cpse	r24, r1
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <_puts+0x44>
{
	#if DEBUG
	usoft_putString((unsigned char *)str);
	usoft_putCharf(0x0D);
	#endif
}
 1be:	08 95       	ret

000001c0 <main>:
	unsigned int tMeasure;
	unsigned int moveSensCount = 0;
	uint8_t moveSensLatest = 255;
	
	unsigned int heaterMaxCount = 0;
	io_set(DDR, IO_Heat);
 1c0:	bc 9a       	sbi	0x17, 4	; 23
#include <uart_soft.h>
#endif

void adc_init(void)
{
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0); // prescaler 64 => 125 kHz
 1c2:	86 e8       	ldi	r24, 0x86	; 134
 1c4:	86 b9       	out	0x06, r24	; 6
	DIDR0 |= (0<<ADC0D)|(0<<ADC1D)|(0<<ADC2D)|(1<<ADC3D); //disable digital input for selected ADC
 1c6:	a3 9a       	sbi	0x14, 3	; 20

void usoft_init()
{
	#if USOFT_TXEN
	//set output
	io_set(DDR, USOFT_IO_TX);
 1c8:	b9 9a       	sbi	0x17, 1	; 23
	usoft_txSet();
 1ca:	c1 9a       	sbi	0x18, 1	; 24
	io_reset(DDR, USOFT_IO_RX);
	io_resetPort(USOFT_IO_RX);
	#endif

	//timerStop();
	USOFT_tCCR = USOFT_tCCRvalue;
 1cc:	92 e0       	ldi	r25, 0x02	; 2
 1ce:	93 bf       	out	0x33, r25	; 51
	USOFT_timerStart();
 1d0:	82 bf       	out	0x32, r24	; 50
	USOFT_setTIMSK();
 1d2:	89 b7       	in	r24, 0x39	; 57
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	89 bf       	out	0x39, r24	; 57

	asm_sei();
 1d8:	78 94       	sei
{
	unsigned int tMeasure;
	unsigned int moveSensCount = 0;
	uint8_t moveSensLatest = 255;
	
	unsigned int heaterMaxCount = 0;
 1da:	00 e0       	ldi	r16, 0x00	; 0
 1dc:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
	unsigned int tMeasure;
	unsigned int moveSensCount = 0;
	uint8_t moveSensLatest = 255;
 1de:	cf ef       	ldi	r28, 0xFF	; 255
#define setOFF(str) io_resetPort(IO_Heat);heaterMaxCount = 0;_puts(str);

int main(void)
{
	unsigned int tMeasure;
	unsigned int moveSensCount = 0;
 1e0:	c1 2c       	mov	r12, r1
 1e2:	d1 2c       	mov	r13, r1
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 1e4:	88 e1       	ldi	r24, 0x18	; 24
 1e6:	68 2e       	mov	r6, r24
 1e8:	9c e0       	ldi	r25, 0x0C	; 12
 1ea:	79 2e       	mov	r7, r25
}

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
 1ec:	23 e0       	ldi	r18, 0x03	; 3
 1ee:	b2 2e       	mov	r11, r18
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
 1f0:	3a e0       	ldi	r19, 0x0A	; 10
 1f2:	e3 2e       	mov	r14, r19
 1f4:	f1 2c       	mov	r15, r1
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
	usoft_rx_tx_byte = b;
	usoft_timeCount = 0;
	usoft_tx_work = 1;
 1f6:	aa 24       	eor	r10, r10
 1f8:	a3 94       	inc	r10

#if USOFT_TXEN
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
	usoft_rx_tx_byte = b;
 1fa:	4d e0       	ldi	r20, 0x0D	; 13
 1fc:	54 2e       	mov	r5, r20
	#endif
	
	while (1)
	{
		//watchdog behavior
		wdt_reset();
 1fe:	a8 95       	wdr
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	a8 95       	wdr
 206:	61 bc       	out	0x21, r6	; 33
 208:	0f be       	out	0x3f, r0	; 63
 20a:	71 bc       	out	0x21, r7	; 33
 20c:	8c 2f       	mov	r24, r28
 20e:	de e5       	ldi	r29, 0x5E	; 94
		wdt_enable(WDTO_250MS);
		
		//moveSensor behavior
		for (uint8_t i = 0; i < 94; ++i) //delay_ms(100)
		{
			uint8_t pin = io_getPin(IO_MoveSens);
 210:	c6 b3       	in	r28, 0x16	; 22
 212:	c1 70       	andi	r28, 0x01	; 1
			if (pin != moveSensLatest)
 214:	c8 17       	cp	r28, r24
 216:	29 f0       	breq	.+10     	; 0x222 <main+0x62>
			{
				moveSensCount = 0;
				moveSensLatest = pin;
				_puts("move");
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	aa df       	rcall	.-172    	; 0x172 <_puts>
		for (uint8_t i = 0; i < 94; ++i) //delay_ms(100)
		{
			uint8_t pin = io_getPin(IO_MoveSens);
			if (pin != moveSensLatest)
			{
				moveSensCount = 0;
 21e:	c1 2c       	mov	r12, r1
 220:	d1 2c       	mov	r13, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	8f e5       	ldi	r24, 0x5F	; 95
 224:	99 e0       	ldi	r25, 0x09	; 9
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x66>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x6c>
 22c:	00 00       	nop
 22e:	d1 50       	subi	r29, 0x01	; 1
		wdt_enable(WDTO_250MS);
		
		//moveSensor behavior
		for (uint8_t i = 0; i < 94; ++i) //delay_ms(100)
		{
			uint8_t pin = io_getPin(IO_MoveSens);
 230:	8c 2f       	mov	r24, r28
		//watchdog behavior
		wdt_reset();
		wdt_enable(WDTO_250MS);
		
		//moveSensor behavior
		for (uint8_t i = 0; i < 94; ++i) //delay_ms(100)
 232:	71 f7       	brne	.-36     	; 0x210 <main+0x50>
				moveSensLatest = pin;
				_puts("move");
			}
			_delay_ms(1);
		}
		if (moveSensCount >= MOVE_SENS_TIMEOUT)
 234:	98 e2       	ldi	r25, 0x28	; 40
 236:	c9 16       	cp	r12, r25
 238:	93 e2       	ldi	r25, 0x23	; 35
 23a:	d9 06       	cpc	r13, r25
 23c:	08 f0       	brcs	.+2      	; 0x240 <main+0x80>
 23e:	53 c0       	rjmp	.+166    	; 0x2e6 <main+0x126>
		{
			setOFF("OffMove");
			continue;
		}
		++moveSensCount;
 240:	ef ef       	ldi	r30, 0xFF	; 255
 242:	ce 1a       	sub	r12, r30
 244:	de 0a       	sbc	r13, r30
 246:	9a e0       	ldi	r25, 0x0A	; 10
		
		//heater behavior
		tMeasure = 0;
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	e0 ef       	ldi	r30, 0xF0	; 240
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x90>
}

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
 254:	b7 b8       	out	0x07, r11	; 7
 256:	f0 e2       	ldi	r31, 0x20	; 32
 258:	fa 95       	dec	r31
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x98>
	_delay_us(10); // Delay needed for the stabilization of the ADC input voltage
	ADCSRA|=(1<<ADSC); // Start the AD conversion
 25c:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & (1<<ADIF))==0); // Wait for the AD conversion to complete
 25e:	34 9b       	sbis	0x06, 4	; 6
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x9e>
	ADCSRA|=(1<<ADIF);
 262:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 264:	44 b1       	in	r20, 0x04	; 4
 266:	55 b1       	in	r21, 0x05	; 5
		//heater behavior
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
 268:	24 0f       	add	r18, r20
 26a:	35 1f       	adc	r19, r21
 26c:	91 50       	subi	r25, 0x01	; 1
		}
		++moveSensCount;
		
		//heater behavior
		tMeasure = 0;
		for (uint8_t i = 0; i < adcCount; ++i)
 26e:	71 f7       	brne	.-36     	; 0x24c <main+0x8c>
		{
			_delay_us(100);
			tMeasure += read_adc(IO_ADC_T);
		}
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
 270:	c9 01       	movw	r24, r18
 272:	b7 01       	movw	r22, r14
 274:	54 d0       	rcall	.+168    	; 0x31e <__udivmodhi4>
 276:	4b 01       	movw	r8, r22
		
		if (tMeasure < 20 || tMeasure > 1010){
 278:	cb 01       	movw	r24, r22
 27a:	44 97       	sbiw	r24, 0x14	; 20
 27c:	8f 3d       	cpi	r24, 0xDF	; 223
 27e:	93 40       	sbci	r25, 0x03	; 3
 280:	c8 f5       	brcc	.+114    	; 0x2f4 <main+0x134>
			setOFF("T Broken");
			continue;
		}
		
		if (tMeasure >= ADC_TD_OFF)
 282:	6b 35       	cpi	r22, 0x5B	; 91
 284:	73 40       	sbci	r23, 0x03	; 3
 286:	e8 f5       	brcc	.+122    	; 0x302 <main+0x142>
		{
			setOFF("Off");
		}
		else if (tMeasure <= ADC_TD_ON) {
			
			if (heaterMaxCount >= HEATER_MAX_TIME)
 288:	08 35       	cpi	r16, 0x58	; 88
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	19 07       	cpc	r17, r25
 28e:	08 f4       	brcc	.+2      	; 0x292 <main+0xd2>
 290:	3f c0       	rjmp	.+126    	; 0x310 <main+0x150>
			{
				_puts("MaxTime");
 292:	8a e7       	ldi	r24, 0x7A	; 122
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	6d df       	rcall	.-294    	; 0x172 <_puts>
}
#endif

static inline void rxReset()	//break off rx
{
	usoft_rx_work = 0;
 298:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
 29c:	e5 e8       	ldi	r30, 0x85	; 133
 29e:	f0 e0       	ldi	r31, 0x00	; 0
}

void usoft_putStringf(const char *str)
{
	rxReset();
	while (*str)
 2a0:	81 91       	ld	r24, Z+
 2a2:	88 23       	and	r24, r24
 2a4:	79 f0       	breq	.+30     	; 0x2c4 <main+0x104>
}

#if USOFT_TXEN
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
 2a6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	usoft_rx_tx_byte = b;
 2aa:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <usoft_rx_tx_byte>
	usoft_timeCount = 0;
 2ae:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
	usoft_tx_work = 1;
 2b2:	a0 92 8c 00 	sts	0x008C, r10	; 0x80008c <usoft_tx_work>
	while (usoft_tx_work);
 2b6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
 2ba:	81 11       	cpse	r24, r1
 2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <main+0xf6>
}

void usoft_putStringf(const char *str)
{
	rxReset();
	while (*str)
 2be:	81 91       	ld	r24, Z+
 2c0:	81 11       	cpse	r24, r1
 2c2:	f1 cf       	rjmp	.-30     	; 0x2a6 <main+0xe6>
			}
		}
		
		#if DEBUG
		usoft_putStringf("adc:");
		usoft_putUInt(tMeasure);
 2c4:	c4 01       	movw	r24, r8
 2c6:	c0 de       	rcall	.-640    	; 0x48 <usoft_putUInt>
}
#endif

static inline void rxReset()	//break off rx
{
	usoft_rx_work = 0;
 2c8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usoft_rx_work>
}

#if USOFT_TXEN
static void setChar(uint8_t b)
{
	usoft_iBit = 0;
 2cc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	usoft_rx_tx_byte = b;
 2d0:	50 92 8d 00 	sts	0x008D, r5	; 0x80008d <usoft_rx_tx_byte>
	usoft_timeCount = 0;
 2d4:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usoft_timeCount>
	usoft_tx_work = 1;
 2d8:	a0 92 8c 00 	sts	0x008C, r10	; 0x80008c <usoft_tx_work>
	while (usoft_tx_work);
 2dc:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usoft_tx_work>
 2e0:	81 11       	cpse	r24, r1
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <main+0x11c>
 2e4:	8c cf       	rjmp	.-232    	; 0x1fe <main+0x3e>
			}
			_delay_ms(1);
		}
		if (moveSensCount >= MOVE_SENS_TIMEOUT)
		{
			setOFF("OffMove");
 2e6:	c4 98       	cbi	0x18, 4	; 24
 2e8:	85 e6       	ldi	r24, 0x65	; 101
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	42 df       	rcall	.-380    	; 0x172 <_puts>
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	10 e0       	ldi	r17, 0x00	; 0
			continue;
 2f2:	85 cf       	rjmp	.-246    	; 0x1fe <main+0x3e>
		}
		//tMeasure = calcT(tMeasure/adcCount);
		tMeasure = tMeasure/adcCount;
		
		if (tMeasure < 20 || tMeasure > 1010){
			setOFF("T Broken");
 2f4:	c4 98       	cbi	0x18, 4	; 24
 2f6:	8d e6       	ldi	r24, 0x6D	; 109
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	3b df       	rcall	.-394    	; 0x172 <_puts>
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
			continue;
 300:	7e cf       	rjmp	.-260    	; 0x1fe <main+0x3e>
		}
		
		if (tMeasure >= ADC_TD_OFF)
		{
			setOFF("Off");
 302:	c4 98       	cbi	0x18, 4	; 24
 304:	86 e7       	ldi	r24, 0x76	; 118
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	34 df       	rcall	.-408    	; 0x172 <_puts>
 30a:	00 e0       	ldi	r16, 0x00	; 0
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	c4 cf       	rjmp	.-120    	; 0x298 <main+0xd8>
			{
				_puts("MaxTime");
			}
			else
			{
				++heaterMaxCount;
 310:	0f 5f       	subi	r16, 0xFF	; 255
 312:	1f 4f       	sbci	r17, 0xFF	; 255
				io_setPort(IO_Heat);
 314:	c4 9a       	sbi	0x18, 4	; 24
				_puts("On");
 316:	82 e8       	ldi	r24, 0x82	; 130
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2b df       	rcall	.-426    	; 0x172 <_puts>
 31c:	bd cf       	rjmp	.-134    	; 0x298 <main+0xd8>

0000031e <__udivmodhi4>:
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	51 e1       	ldi	r21, 0x11	; 17
 324:	07 c0       	rjmp	.+14     	; 0x334 <__udivmodhi4_ep>

00000326 <__udivmodhi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	a6 17       	cp	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	10 f0       	brcs	.+4      	; 0x334 <__udivmodhi4_ep>
 330:	a6 1b       	sub	r26, r22
 332:	b7 0b       	sbc	r27, r23

00000334 <__udivmodhi4_ep>:
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	5a 95       	dec	r21
 33a:	a9 f7       	brne	.-22     	; 0x326 <__udivmodhi4_loop>
 33c:	80 95       	com	r24
 33e:	90 95       	com	r25
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
